-- Check if app schema exists, if not create it
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_namespace WHERE nspname = 'app') THEN
        CREATE SCHEMA IF NOT EXISTS app;
    END IF;
END
$$;

-- Copy over tables from public schema if they exist but don't exist in app schema
DO $$
BEGIN
    -- Check if meetings table exists in public but not in app
    IF EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'meetings') AND
       NOT EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'app' AND tablename = 'meetings') THEN
        CREATE TABLE app.meetings AS SELECT * FROM public.meetings;
    END IF;

    -- Check if appointments table exists in public but not in app
    IF EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'appointments') AND
       NOT EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'app' AND tablename = 'appointments') THEN
        CREATE TABLE app.appointments AS SELECT * FROM public.appointments;
    END IF;
    
    -- Check if meeting_notes table exists in public but not in app
    IF EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'meeting_notes') AND
       NOT EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'app' AND tablename = 'meeting_notes') THEN
        CREATE TABLE app.meeting_notes AS SELECT * FROM public.meeting_notes;
    END IF;
    
    -- Check if meeting_attendees table exists in public but not in app
    IF EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'meeting_attendees') AND
       NOT EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'app' AND tablename = 'meeting_attendees') THEN
        CREATE TABLE app.meeting_attendees AS SELECT * FROM public.meeting_attendees;
    END IF;
END
$$;

-- Add Calendly fields to both public and app schemas
DO $$
BEGIN
    -- Add to public.meetings if it exists
    IF EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'meetings') THEN
        ALTER TABLE public.meetings
        ADD COLUMN IF NOT EXISTS calendly_event_uuid UUID,
        ADD COLUMN IF NOT EXISTS calendly_invitee_uuid UUID,
        ADD COLUMN IF NOT EXISTS reschedule_url TEXT,
        ADD COLUMN IF NOT EXISTS cancel_url TEXT,
        ADD COLUMN IF NOT EXISTS canceled_at TIMESTAMPTZ,
        ADD COLUMN IF NOT EXISTS cancel_reason TEXT,
        ADD COLUMN IF NOT EXISTS calendly_event_uri TEXT,
        ADD COLUMN IF NOT EXISTS calendly_invitee_uri TEXT,
        ADD COLUMN IF NOT EXISTS status TEXT;
    END IF;

    -- Add to public.appointments if it exists
    IF EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'appointments') THEN
        ALTER TABLE public.appointments
        ADD COLUMN IF NOT EXISTS calendly_event_uuid UUID,
        ADD COLUMN IF NOT EXISTS calendly_invitee_uuid UUID,
        ADD COLUMN IF NOT EXISTS reschedule_url TEXT,
        ADD COLUMN IF NOT EXISTS cancel_url TEXT,
        ADD COLUMN IF NOT EXISTS canceled_at TIMESTAMPTZ,
        ADD COLUMN IF NOT EXISTS cancel_reason TEXT,
        ADD COLUMN IF NOT EXISTS calendly_event_uri TEXT,
        ADD COLUMN IF NOT EXISTS calendly_invitee_uri TEXT,
        ADD COLUMN IF NOT EXISTS status TEXT;
    END IF;
    
    -- Add to app.meetings if it exists
    IF EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'app' AND tablename = 'meetings') THEN
        ALTER TABLE app.meetings
        ADD COLUMN IF NOT EXISTS calendly_event_uuid UUID,
        ADD COLUMN IF NOT EXISTS calendly_invitee_uuid UUID,
        ADD COLUMN IF NOT EXISTS reschedule_url TEXT,
        ADD COLUMN IF NOT EXISTS cancel_url TEXT,
        ADD COLUMN IF NOT EXISTS canceled_at TIMESTAMPTZ,
        ADD COLUMN IF NOT EXISTS cancel_reason TEXT,
        ADD COLUMN IF NOT EXISTS calendly_event_uri TEXT,
        ADD COLUMN IF NOT EXISTS calendly_invitee_uri TEXT;
    END IF;

    -- Add to app.appointments if it exists
    IF EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'app' AND tablename = 'appointments') THEN
        ALTER TABLE app.appointments
        ADD COLUMN IF NOT EXISTS calendly_event_uuid UUID,
        ADD COLUMN IF NOT EXISTS calendly_invitee_uuid UUID,
        ADD COLUMN IF NOT EXISTS reschedule_url TEXT,
        ADD COLUMN IF NOT EXISTS cancel_url TEXT,
        ADD COLUMN IF NOT EXISTS canceled_at TIMESTAMPTZ,
        ADD COLUMN IF NOT EXISTS cancel_reason TEXT,
        ADD COLUMN IF NOT EXISTS calendly_event_uri TEXT,
        ADD COLUMN IF NOT EXISTS calendly_invitee_uri TEXT;
    END IF;
END
$$;

-- Create indexes for both schemas if tables exist
DO $$
BEGIN
    -- Indexes for public schema
    IF EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'meetings') THEN
        CREATE INDEX IF NOT EXISTS idx_meetings_calendly_event_uuid ON public.meetings(calendly_event_uuid);
        CREATE INDEX IF NOT EXISTS idx_meetings_calendly_invitee_uuid ON public.meetings(calendly_invitee_uuid);
        IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'meetings' AND column_name = 'status') THEN
            CREATE INDEX IF NOT EXISTS idx_meetings_status ON public.meetings(status);
        END IF;
        IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'meetings' AND column_name = 'meeting_date') THEN
            CREATE INDEX IF NOT EXISTS idx_meetings_meeting_date ON public.meetings(meeting_date);
        END IF;
        IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'meetings' AND column_name = 'start_time') THEN
            CREATE INDEX IF NOT EXISTS idx_meetings_start_time ON public.meetings(start_time);
        END IF;
    END IF;
    
    IF EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'appointments') THEN
        CREATE INDEX IF NOT EXISTS idx_appointments_calendly_event_uuid ON public.appointments(calendly_event_uuid);
        CREATE INDEX IF NOT EXISTS idx_appointments_calendly_invitee_uuid ON public.appointments(calendly_invitee_uuid);
    END IF;
    
    -- Indexes for app schema
    IF EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'app' AND tablename = 'meetings') THEN
        CREATE INDEX IF NOT EXISTS idx_app_meetings_calendly_event_uuid ON app.meetings(calendly_event_uuid);
        CREATE INDEX IF NOT EXISTS idx_app_meetings_calendly_invitee_uuid ON app.meetings(calendly_invitee_uuid);
        IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'app' AND table_name = 'meetings' AND column_name = 'start_time') THEN
            CREATE INDEX IF NOT EXISTS idx_app_meetings_start_time ON app.meetings(start_time);
        END IF;
    END IF;
    
    IF EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'app' AND tablename = 'appointments') THEN
        CREATE INDEX IF NOT EXISTS idx_app_appointments_calendly_event_uuid ON app.appointments(calendly_event_uuid);
        CREATE INDEX IF NOT EXISTS idx_app_appointments_calendly_invitee_uuid ON app.appointments(calendly_invitee_uuid);
    END IF;
END
$$;

-- Drop and recreate policies with proper type casting
DO $$
BEGIN
    -- Only create app schema policies if app.meeting_notes exists
    IF EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'app' AND tablename = 'meeting_notes') THEN
        -- Drop the policy if it exists (ignore error if it doesn't)
        BEGIN
            DROP POLICY IF EXISTS "Users can view own meeting notes" ON app.meeting_notes;
        EXCEPTION WHEN OTHERS THEN
            -- Do nothing if policy doesn't exist
        END;
        
        -- Create the policy with explicit type casting
        CREATE POLICY "Users can view own meeting notes"
        ON app.meeting_notes FOR SELECT
        USING (
            EXISTS (
                SELECT 1 FROM app.meetings 
                WHERE meetings.id::text = meeting_notes.meeting_id::text 
                AND meetings.client_id = auth.uid()
            ) OR
            EXISTS (
                SELECT 1 FROM app.meeting_attendees 
                WHERE meeting_attendees.meeting_id::text = meeting_notes.meeting_id::text 
                AND meeting_attendees.user_id = auth.uid()
            )
        );
    END IF;
END
$$;
